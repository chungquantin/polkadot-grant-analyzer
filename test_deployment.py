#!/usr/bin/env python3
"""
Test script to verify deployment setup
"""

import os
import sys

def test_imports():
    """Test all imports work correctly"""
    print("üîç Testing imports...")
    
    try:
        import streamlit as st
        print("‚úÖ streamlit imported successfully")
    except ImportError as e:
        print(f"‚ùå streamlit import failed: {e}")
        return False
    
    try:
        import pandas as pd
        print("‚úÖ pandas imported successfully")
    except ImportError as e:
        print(f"‚ùå pandas import failed: {e}")
        return False
    
    try:
        import plotly.express as px
        print("‚úÖ plotly imported successfully")
    except ImportError as e:
        print(f"‚ùå plotly import failed: {e}")
        return False
    
    try:
        from github_client import GitHubClient
        print("‚úÖ github_client imported successfully")
    except ImportError as e:
        print(f"‚ùå github_client import failed: {e}")
        return False
    
    try:
        from data_processor import GrantDataProcessor
        print("‚úÖ data_processor imported successfully")
    except ImportError as e:
        print(f"‚ùå data_processor import failed: {e}")
        return False
    
    try:
        from database import GrantDatabase
        print("‚úÖ database imported successfully")
    except ImportError as e:
        print(f"‚ùå database import failed: {e}")
        return False
    
    try:
        from ai_evaluator import AIEvaluator
        print("‚úÖ ai_evaluator imported successfully")
    except ImportError as e:
        print(f"‚ùå ai_evaluator import failed: {e}")
        return False
    
    try:
        from config import GRANT_REPOSITORIES, STREAMLIT_CONFIG
        print("‚úÖ config imported successfully")
    except ImportError as e:
        print(f"‚ö†Ô∏è  config import failed (using fallbacks): {e}")
    
    return True

def test_environment():
    """Test environment variables"""
    print("\nüîç Testing environment variables...")
    
    github_token = os.getenv('GITHUB_TOKEN')
    if github_token:
        print("‚úÖ GITHUB_TOKEN is set")
    else:
        print("‚ö†Ô∏è  GITHUB_TOKEN not set (some features may not work)")
    
    openai_key = os.getenv('OPENAI_API_KEY')
    if openai_key:
        print("‚úÖ OPENAI_API_KEY is set")
    else:
        print("‚ö†Ô∏è  OPENAI_API_KEY not set (AI features will be disabled)")
    
    return True

def test_database():
    """Test database functionality"""
    print("\nüîç Testing database...")
    
    try:
        from database import GrantDatabase
        db = GrantDatabase()
        info = db.get_database_info()
        print(f"‚úÖ Database initialized successfully")
        print(f"   Tables: {info.get('tables', [])}")
        print(f"   Proposals: {info.get('proposals_count', 0)}")
        print(f"   Metrics: {info.get('metrics_count', 0)}")
        print(f"   Size: {info.get('database_size_mb', 0):.2f} MB")
        return True
    except Exception as e:
        print(f"‚ùå Database test failed: {e}")
        return False

def test_components():
    """Test component initialization"""
    print("\nüîç Testing component initialization...")
    
    try:
        from github_client import GitHubClient
        from data_processor import GrantDataProcessor
        from database import GrantDatabase
        from ai_evaluator import AIEvaluator
        
        github_client = GitHubClient()
        data_processor = GrantDataProcessor()
        database = GrantDatabase()
        ai_evaluator = AIEvaluator()
        
        print("‚úÖ All components initialized successfully")
        return True
    except Exception as e:
        print(f"‚ùå Component initialization failed: {e}")
        return False

def test_streamlit_config():
    """Test Streamlit configuration"""
    print("\nüîç Testing Streamlit configuration...")
    
    try:
        import streamlit as st
        from config import STREAMLIT_CONFIG
        
        print(f"‚úÖ Streamlit config loaded:")
        print(f"   Page title: {STREAMLIT_CONFIG.get('page_title', 'N/A')}")
        print(f"   Page icon: {STREAMLIT_CONFIG.get('page_icon', 'N/A')}")
        print(f"   Layout: {STREAMLIT_CONFIG.get('layout', 'N/A')}")
        return True
    except Exception as e:
        print(f"‚ùå Streamlit config test failed: {e}")
        return False

def main():
    """Run all tests"""
    print("üöÄ Polkadot Grant Analyzer - Deployment Test")
    print("=" * 50)
    
    tests = [
        test_imports,
        test_environment,
        test_database,
        test_components,
        test_streamlit_config
    ]
    
    passed = 0
    total = len(tests)
    
    for test in tests:
        try:
            if test():
                passed += 1
        except Exception as e:
            print(f"‚ùå Test {test.__name__} failed with exception: {e}")
    
    print("\n" + "=" * 50)
    print(f"üìä Test Results: {passed}/{total} tests passed")
    
    if passed == total:
        print("üéâ All tests passed! Deployment should work correctly.")
        return True
    else:
        print("‚ö†Ô∏è  Some tests failed. Please check the issues above.")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1) 